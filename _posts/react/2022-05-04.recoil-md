---
# []는 카테고리 명 title을 적지 않으면 파일명이 올라간다.
title: 'Recoil을 알아보자'
#excerpt는 description
excerpt: 처음으로 배우는 Recoil의 간단 메모
# 대괄호 안에 들어가는 카테고리 : 목차
categories:
  - 'React'
tags:
  - [React, Recoil]
# toc는 우측 테이블
toc: true
# 우측 테이블 내용이 따라 오는것
toc_sticky: true
# 우측 테이블 제목
toc_label: 'Recoil'

toc_icon: 'cookie-bite'
# 처음 작성날짜
date: 2022-05-04
# 수정날짜
last_modified_at: 2022-05-04
---

## Recoli이란?

---

[Recoil 공홈](https://recoiljs.org/ko/)

- 페이스북에서 만들었으며, React.js에서 사용할 수 있는 `state management libray`
- 간단하고 이해하기 쉽다.
- 여기서 `state management libray` 란 Redux 같은 상태관리 라이브러리를 뜻 함

### RecoilRoot

---

- recoil을 사용하는 컴포넌트는 보통 `RecoilRoot`가 필요합니다.
- 보통은 루트 컴포넌트에 RecoilRoot를 적용시킵니다.

### Atom

---

- **Atom**은 **상태**(**state**)의 일부를 나타냅니다..
- Atoms는 어떤 컴포넌트에서나 읽고 쓸 수가 있습니다.. atom의 값을 읽는 컴포넌트들은 암묵적으로 atom을 **구독합니다.** 그래서 atom에 어떤 변화가 있으면 그 atom을 구독하는 모든 컴포넌트들이 재 렌더링 되는 결과가 발생할 것입니다.

```jsx
const textState = atom({
  key: 'textState', // 기본적인 유니크 아이디
  default: '', // 기본값(초기값)
});
```

### useRecoilValue(state)

---

- Recoil `state`를 반환합니다.
- 이 훅은 암묵적으로 주어진 상태에 컴포넌트를 **“구독” 합니다.**
- 이 hook는 **읽기 전용 상태**와 **쓰기 가능 상태**에서 모두 동작하므로 컴포넌트가 상태를 읽을 수만 있게 하고 싶을 때에 추천하는 hook입니다.

```jsx
const namesState = atom({
  key: 'namesState',
  default: ['', 'Ella', 'Chris', '', 'Paul'],
});

const names = useRecoilValue(namesState);
```

### useSetRecoilState(fn)

---

- Recoil state의 값을 업데이트하기 위한 함수를 반환합니다.
- `useSetRecoilState` 는 react의 `setState` 와 비슷한 역할과 모양새를 가지고 있습니다.

```jsx
const setDarkAtom = useSetRecoilState(isDarkAtom);
const toggleDarkAtom = () => setDarkAtom(prev => !prev);
```

### useRecoilState(atom)

---

- 형태는 `const [value,modFn] = useRecoilState(atom)` 의 형태를 가지고 있습니다.
- 해당이름은 중요하지 않지만 순서는 중요합니다.
- 첫번째 인자는 atom의 value값을 나타내며 두번째 인자는 해당 밸류를 변경하는 함수를 가지고 있습니다.
- React의 useState hook 과 굉장히 유사성을 가지고 있습니다.
- useRecoilState는 useRecoilValue와 useSetRecoilState의 성질을 다 가지고 있는 api라고 보면 될 거 같습니다.
- 타입스크립트를 포함한 코드 적용하기

  - List.tsx

  ```jsx
  interface ITodo {
    text: string;
    // 제한된 타입만 받을 수 있도록 적용
    category: 'TO_DO' | 'DOING' | 'DONE';
  }

  const [todos, setTodos] = useRecoilState(toDoState);

  const onSubmit = (data: IForm) => {
    /* NOTE: 
     atom 수정함수는 두개의 동작을 할 수 있다.
     1. state를 직접 수정하는 방법
     2. 함수를 사용 함수의 리턴값이 새로운 state가 된다.
     기존의 setState처럼 불변성을 유지해줘야 한다.
     */

    setTodos(oldTodo => [{ text: data.toDo, category: 'TO_DO', id: Date.now() }, ...oldTodo]);
    setValue('toDo', '');
  };
  ```

  - atoms.ts

  ```jsx
  import { atom } from 'recoil';
  import { ITodo } from './components/TodoList';

  export const toDoState = atom<ITodo[]>({
    key: 'toDo',
    default: [],
  });
  ```

### Selectors

---

- selector는 state를 가져다가 원하는 모습으로 “변형"을 시킬 수 있는 도구이다.
- selector의 요점은 atom을 가져다가 output을 변형할 수 있다.
- selector에서 atom을 가져오는것은? => `get`함수
- get 함수는 selector가 어떤것을 반환 할지를 결정한다. 어떤 값을 리턴하던지 간에 그 값은 해당 셀렉터의 값이 된다.

```jsx
export const toDoSelectors = selector({
  key: 'toDoSelect',
  get: ({ get }) => {
    //   NOTE: get을 이용하여 selector의 내부로 atom을 가져올 수 있다.
    const toDos = get(toDoState);
    const category = get(categoryState);
    return toDos.filter(item => item.category === category);
    // return 12312312 을 하면 위에 상관없이 selector의 값은 123..이 된다.
  },
});
```

- set 함수 : set은 state를 수정하는 것을 도와준다. (atom 수정)
- `useRecoilState` 에서 두번째 값은 `selector`를 불러올 때 셀렉터의 set함수를 실행시킨다.

</br>

**[정리]**

get 매개변수

- 다른 atom이나 selector로 값을 “찾는데" 사용되는 함수. 이 함수는 selector를 주어진 atom이나 selector를 “구독하진 않는다.”

set 매개변수

- Recoil state의 값을 변경할 때 사용되는 함수, “첫번째"매개변수는 Recoil의 state, 두번째는 새로운값(newValue)를 나타낸다.

```jsx
const proxySelector = selector({
  key: 'ProxySelector',
  get: ({ get }) => get(myAtom),
  set: ({ set }, newValue) => set(myAtom, newValue),
});
```

- 코드

  ```jsx
  import React, { InputHTMLAttributes } from 'react';
  import { atom, selector, useRecoilState, useRecoilValue } from 'recoil';
  import './styles.css';

  export const xxx = atom({
    key: 'minutes',
    default: 0,
  });

  // NOTE: sele이 unknown으로 뜨니 해당 selector의 타입을 지정
  export const hourSelector =
    selector <
    number >
    {
      key: 'hour',
      get: ({ get }) => {
        //selector에서 atom을 가져오는것은? => get함수
        const minutes = get(xxx);
        return minutes / 60;
      },
      set: ({ set }, newValue) => {
        // atom을 수정
        const setH = Number(newValue) * 60;
        // 첫번째 인자로는 수정하고자 하는 recoil의 atom,두번째는 "새로운값"
        set(xxx, setH);
      },
    };

  export default function App() {
    const [minutes, setMinutes] = useRecoilState(xxx);
    // 여기서의 setSele은 셀렉터의 set함수를 실행시킨다.
    const [sele, setSele] = useRecoilState(hourSelector);

    const onMchange = (e: React.FormEvent<HTMLInputElement>) => {
      const {
        currentTarget: { value },
      } = e;
      setMinutes(+value); //value가 string이라 number로 전환
    };

    const onHchange = (e: React.FormEvent<HTMLInputElement>) => {
      const {
        currentTarget: { value },
      } = e;
      setSele(+value);
    };

    return (
      <div className="App">
        <input type="number" value={minutes} onChange={onMchange} placeholder="Minutes" />
        <input onChange={onHchange} value={sele} type="number" placeholder="Hours" />
      </div>
    );
  }
  ```
